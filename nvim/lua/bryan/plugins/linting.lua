---@diagnostic disable: undefined-global
return {
  -- Temporarily disabled to fix nvim-lint parser error
  -- "mfussenegger/nvim-lint",
  -- event = { "BufReadPre", "BufNewFile" },
  -- config = function()
  --   local lint = require("lint")
  --
  --   lint.linters_by_ft = {
  --     -- Web Technologies
  --     javascript = { "eslint_d" },
  --     typescript = { "eslint_d" },
  --     javascriptreact = { "eslint_d" },
  --     typescriptreact = { "eslint_d" },
  --     svelte = { "eslint_d" },
  --     vue = { "eslint_d" },
  --
  --     -- Python
  --     python = { "pylint", "flake8" },
  --
  --     -- Go
  --     go = { "golangci_lint" },
  --
  --     -- Rust
  --     rust = { "clippy" },
  --
  --     -- C/C++
  --     c = { "cppcheck" },
  --     cpp = { "cppcheck" },
  --     cxx = { "cppcheck" },
  --     h = { "cppcheck" },
  --     hpp = { "cppcheck" },
  --
  --     -- Shell
  --     sh = { "shellcheck" },
  --     bash = { "shellcheck" },
  --     zsh = { "shellcheck" },
  --
  --     -- Lua
  --     lua = { "luacheck" },
  --
  --     -- Markdown
  --     markdown = { "markdownlint" },
  --     md = { "markdownlint" },
  --
  --     -- YAML
  --     yaml = { "yamllint" },
  --     yml = { "yamllint" },
  --
  --     -- JSON
  --     json = { "jsonlint" },
  --   }
  --
  --   -- Configure linters with word wrap limits (restored with a safe markdownlint definition)
  --   lint.linters = {
  --     -- Web Technologies
  --     eslint_d = {
  --       cmd = "eslint_d",
  --       args = {
  --         "--max-len=130",
  --         "--print-width=130",
  --       },
  --     },
  --
  --     -- Python
  --     pylint = {
  --       cmd = "pylint",
  --       args = {
  --         "--max-line-length=130",
  --         },
  --       },
  --
  --     flake8 = {
  --       cmd = "flake8",
  --       args = {
  --         "--max-line-length=130",
  --       },
  --     },
  --
  --     -- Go
  --     golangci_lint = {
  --       cmd = "golangci-lint",
  --       args = {
  --         "--max-line-length=130",
  --       },
  --     },
  --
  --     -- Rust
  --     clippy = {
  --       cmd = "cargo",
  --       args = {
  --         "clippy",
  --       },
  --     },
  --
  --     -- C/C++
  --     cppcheck = {
  --       cmd = "cppcheck",
  --       args = {},
  --     },
  --
  --     -- Shell
  --     shellcheck = {
  --       cmd = "shellcheck",
  --       args = {},
  --     },
  --
  --     -- Lua
  --     luacheck = {
  --       cmd = "luacheck",
  --       args = {},
  --     },
  --
  --     -- Markdown (set a proper cmd and safe args)
  --     markdownlint = {
  --       cmd = "markdownlint",
  --       args = {
  --         "--stdin",
  --       },
  --     },
  --
  --     -- YAML
  --     yamllint = {
  --       cmd = "yamllint",
  --       args = {},
  --     },
  --
  --     -- JSON
  --     jsonlint = {
  --       cmd = "jsonlint",
  --       args = {},
  --     },
  --   }
  --
  --   local lint_augroup = vim.api.nvim_create_augroup("lint", { clear = true })
  --
  --   vim.api.nvim_create_autocmd({ "BufEnter", "BufWritePost", "InsertLeave" }, {
  --     group = lint_augroup,
  --     callback = function()
  --       lint.try_lint()
  --     end,
  --   })
  --
  --   vim.keymap.set("n", "<leader>ll", function()
  --     lint.try_lint()
  --   end, { desc = "Trigger linting for current file" })
  -- end,
}
